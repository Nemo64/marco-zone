$content-size: 540px / 16px * 1rem;
$full-content-size: $content-size + 2rem;
$desktop-sidebar-size: 14rem;
$desktop-sidebar-min-width: $desktop-sidebar-size + $full-content-size;
$desktop-sidebar-min-height: 30rem;
$background-color: snow;

body {
    @media screen and (min-width: $desktop-sidebar-min-width) and (min-height: $desktop-sidebar-min-height) {
        padding-left: $desktop-sidebar-size;
    }
}

amp-img, img {
    max-width: 100%;
    height: auto;
}

figure {
    // i don't expect a h1 here ever
    > h2,
    > h3 {
        margin-top: 1rem;
    }
}

@media screen {
    div.highlighter-rouge,
    figure,
    blockquote {
        clear: both;
        margin: 0;
        padding: 0 1rem;

        &:after,
        &:before {
            content: "";
            display: block;
            max-width: $full-content-size;
            height: 1px;
            background-color: whitesmoke;
            margin: 1rem -1rem;
        }

        + div.highlighter-rouge:before,
        + figure:before,
        + blockquote:before {
            content: none;
        }
    }

    .page-content {
        > p, > .fake-paragraph,
        > ul, > ol,
        > h1, > h2, > h3,
        > amp-img, > noscript > img {
            box-sizing: border-box;
            max-width: $content-size;
            margin-left: 1rem;
            margin-right: 1rem;
        }

        @media (max-width: $content-size) {
            // if a page content (an image) is wide enough:
            // stretch it over the entire screen width
            > figure > [sizes*="(max-width:#{$content-size})100vw"] {
                display: block;
                margin: -1rem;
                max-width: none;
            }
        }

        // If the scaling of an image would be an exact 2x (or 3x) and there isn't a retina version present
        // i think it looks better to scale with nearest neighbor in those cases.
        // i can't easily check if the image would be scaled 2x unless i know how wide the image is going to be
        // this makes it hard to implement this in mobile layouts
        // but i also assume that it is more annoying on a desktop since the images will be bigger there
        // if your phone has a very high dpi, then i don't bother and just make it sharp
        @media (device-pixel-ratio: 2) and (min-width: $full-content-size),
        (-webkit-device-pixel-ratio: 2) and (min-width: $full-content-size),
        (min-resolution: 288dpi) /* if your dpi is that high, don't bother with not making it crisp */
        {
            $retina-pixel-width-count: $content-size * 16 * 2 / 1rem;
            //noinspection CssOverwrittenProperties
            > figure > amp-img[srcset]:not([srcset*="#{$retina-pixel-width-count}w"]) > img {
                image-rendering: -webkit-crisp-edges;
                image-rendering: -moz-crisp-edges;
                image-rendering: pixelated;
                -ms-interpolation-mode: nearest-neighbor;
            }
        }
    }
}

blockquote {
    > p {
        box-sizing: border-box;
        max-width: $content-size - 1rem;
        margin-left: 1rem;
        margin-right: 1rem;
    }

    cite {
        display: block;
        font-size: 0.8em;
    }
}

.tldr-wrapper {
    max-width: $full-content-size;
    padding-left: 1rem;
    padding-right: 1rem;
}

@media print, screen and (min-width: $full-content-size) {

    .tldr-left {
        width: 18rem;
        clear: left;
        float: left;
        margin-right: 1rem;
    }

    .tldr-right {
        width: 18rem;
        clear: right;
        float: right;
        margin-left: 1rem;
    }

    p {
        /* I assume the text is probably hyphenated using &shy; */
        text-align: justify;
    }
}

.highlighter-rouge .c, // comments
.highlighter-rouge .c1, // inline comment
.highlighter-rouge .c2, // multi line comment
.highlighter-rouge .sd // doc comment
{
    color: darkgray;
}

.highlighter-rouge .s, // strings
.highlighter-rouge .s1, // single quote strings
.highlighter-rouge .s2, // double quote strings
.highlighter-rouge .k, // keywords
.highlighter-rouge .nv, // variables
{
    color: indianred;
}

.language-yaml .s, // strings
.language-yaml .s1, // single quote strings
.language-yaml .s2, // double quote strings
.language-yaml .nv, // keywords
.language-yaml .nv // variables
{
    color: inherit;
}

.language-yaml .na, // keys
{
    color: indianred;
}

.highlighter-rouge .k + .nv // don't highlight variables after a keyword
{
    color: inherit
}

.highlighter-rouge .gd // diff removal
{
    background-color: transparentize(indianred, 0.8);
}

.highlighter-rouge .gi // diff addition
{
    background-color: transparentize(lightgreen, 0.8);
}

.page-header {
    margin: 0 auto;

    &__logo {
        display: inline-block;
        padding: 1rem;
        margin: 0;
        font-size: 1.5rem;
    }

    @media screen and (min-width: $desktop-sidebar-min-width) and (min-height: $desktop-sidebar-min-height) {
        position: fixed;
        left: 0;
        top: 0;
        width: $desktop-sidebar-size;
        height: 100%;
        padding: 1rem 0;
        box-sizing: border-box;

        // hack to make chrome create a layer
        backface-visibility: hidden;

        &__logo {
            display: block;
            float: right;
            padding: 1rem;
            font-size: 2rem;
        }
    }

    @media print {
        display: none;
    }
}

.page-footer {
    min-height: 3rem;
    margin-top: 3rem;
    padding: 1rem 1rem;
    max-width: $content-size;
    font-size: .8em;

    &__copyright {
        display: block;
        float: left;
    }

    &__copyright > span {
        display: inline-block;
    }

    &__nav {
        display: block;
        float: right;
        list-style: none;
        margin: 0;
        padding: 0;
    }

    &__nav > li {
        display: inline-block;
        margin: 0;
        padding: 0;
    }
}
